@page "/items"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<h1>User Items</h1>

<AuthorizeView>
    <Authorized>
        <Title>Strife (@context.User.Identity.Name!)</Title>
        <div>Hello, @context.User.Identity.Name!</div>
        <button class="btn btn-primary" @onclick="ListItems">
            Load Items
        </button>        
        <table class="table">
            <thead>
                <tr>
                    <th>
                        Items
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (items != null)
                {
                    @foreach (var item in @items.BlobItems)
                    {
                        <tr>
                            <td>@item.Uri</td>
                        </tr>
                        @*<tr>
                            <img src="@item.Uri" />
                        </tr>*@
                    }
                }
                else
                {
                    <tr>
                        No Content.
                    </tr>
                }
            </tbody>
        </table>
    </Authorized>

    <NotAuthorized>
        <Title>Strife - Profile</Title>
        <h3>You need to log in to see this!</h3>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private HttpClient client;
    string _fileStatus = "";
    private Strife.Blazor.Shared.ViewModels.UserItemsViewModel items;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            client = ClientFactory.CreateClient("ServerAPI");
            var response = await client.GetAsync($"api/ProfileActions");

            if (response.IsSuccessStatusCode)
            {
                items = await response.Content.ReadFromJsonAsync<Strife.Blazor.Shared.ViewModels.UserItemsViewModel>();
                _fileStatus = $"Success: {await response.Content.ReadAsStringAsync()}";
            }
            else
            {
                _fileStatus = $"Error: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task ListItems()
    {
        var response = await client.GetAsync($"api/ProfileActions");

        if (response.IsSuccessStatusCode)
        {
            items = await response.Content.ReadFromJsonAsync<Strife.Blazor.Shared.ViewModels.UserItemsViewModel>();
            _fileStatus = $"Success: {await response.Content.ReadAsStringAsync()}";
        }
        else
        {
            _fileStatus = $"Error: {await response.Content.ReadAsStringAsync()}";
        }
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
}